{"version":3,"sources":["components/People/people.reducer.ts","components/Person/person.reducer.ts","components/People/index.tsx","components/Film/film.reducer.ts","components/Film/index.tsx","components/Person/index.tsx","App.tsx","store.ts","serviceWorker.js","index.tsx"],"names":["getPeopleList","createAsyncThunk","url","a","fetch","replace","response","json","data","console","log","peopleSlice","createSlice","name","initialState","status","count","results","reducers","list","state","action","payload","extraReducers","pending","type","fulfilled","rejected","error","actions","intialPersonState","height","mass","gender","birth_year","films","personSlice","update","clear","People","props","people","useSelector","store","dispatch","useDispatch","useEffect","className","map","person","indexId","onClick","colSpan","previous","href","next","initialFilmsState","filmsSlice","addToList","titleObj","removeFromList","undefined","resetList","Film","useState","title","film","setFilm","getFilm","Person","App","configureStore","reducer","peopleReducer","personReducer","filmsReducer","middleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qUAKaA,EAAgBC,YAAiB,uBAAD,uCAAyB,WAAOC,GAAP,iBAAAC,EAAA,sEAC3CC,MAAMF,GAAOA,EAAIG,QAAQ,QAAS,WAAa,iCADJ,cAC5DC,EAD4D,gBAElCA,EAASC,OAFyB,cAE5DC,EAF4D,OAGlEC,QAAQC,IAAI,cAAeF,GAHuC,kBAI3DA,GAJ2D,2CAAzB,uDAOhCG,EAAcC,YAAY,CACnCC,KAAM,SACNC,aAXoC,CAAEC,OAAQ,QAASC,MAAO,EAAGC,QAAS,IAY1EC,SAAU,CACNC,KAAM,SAACC,EAAYC,GAEf,OADAZ,QAAQC,IAAI,wBAAyBW,GAC9BA,EAAOC,UAGtBC,eAAa,mBACRvB,EAAcwB,QAAQC,MAAO,SAACL,EAAOC,GAClC,OAAO,2BAAKD,GAAZ,IAAmBL,OAAQ,kBAFtB,cAIRf,EAAc0B,UAAUD,MAAO,SAACL,EAAOC,GAEpC,OADAZ,QAAQC,IAAI,4BAA6BW,GAClC,2BAAKD,GAAZ,IAAmBL,OAAQ,MAASM,EAAOC,YANtC,cAQRtB,EAAc2B,SAASF,MAAO,SAACL,EAAOC,GAEnC,OADAZ,QAAQmB,MAAM,2BAA4BP,GACnC,2BAAKD,GAAZ,IAAmBL,OAAQ,SAAYM,EAAOC,YAVzC,KAgBFX,GADSA,EAAYkB,QAArBV,KACAR,EAAf,SClCMmB,EAAiC,CACnCjB,KAAM,GACNkB,OAAQ,GACRC,KAAM,GACN9B,IAAK,GACL+B,OAAQ,GACRC,WAAY,GACZC,MAAO,IAGEC,EAAcxB,YAAY,CACnCC,KAAM,SACNC,aAAcgB,EACdZ,SAAU,CACNmB,OAAQ,SAACjB,EAAYC,GACjB,OAAOA,EAAOC,SAElBgB,MAAO,SAAClB,GACJ,OAAOU,M,EAKcM,EAAYP,QAA9BQ,E,EAAAA,OACAD,G,EADQE,MACRF,EAAf,SC+CeG,MA3Df,SAAgBC,GACZ,IAAMC,EAAsBC,aAAY,SAACC,GACrC,OAAOA,EAAMF,UAGXG,EAAWC,cAMjB,OAJAC,qBAAU,WACNF,EAAS5C,OACV,IAGC,wBAAO+C,UAAU,SAAjB,UACI,gCACA,+BACI,sCACA,wCACA,2CAGJ,gCACCN,EAAOxB,QAAQ+B,KAAI,SAACC,EAAaC,GAC9B,OACI,qBAAkBC,QAAS,WACvBP,EAASP,EAAOY,KADpB,UAGI,6BAAKA,EAAOpC,OACZ,6BAAKoC,EAAOlB,SACZ,6BAAKkB,EAAOjB,SALPkB,QAWjB,gCACA,6BACI,qBAAIE,QAAS,EAAb,UACMX,EAAO1B,OACP,IAFN,eAGkB,IACb0B,EAAOY,UACR,mBAAGC,KAAM,IAAKH,QAAS,WACnBP,EAAS5C,EAAcyC,EAAOY,YADlC,kBAIE,IACDZ,EAAOc,MACR,mBAAGD,KAAM,IAAKH,QAAS,WAEnBP,EAAS5C,EAAcyC,EAAOc,QAFlC,6B,gBCzDdC,EAAgC,GAEzBC,EAAa7C,YAAY,CAClCC,KAAM,QACNC,aAAc0C,EACdtC,SAAU,CACNwC,UAAW,SAACtC,EAAYC,GACpBZ,QAAQC,IAAI,+BAAgCW,EAAOC,QAAQ4B,SAC3D,IAAIS,EAAgB,GAEpB,OADAA,EAAStC,EAAOC,QAAQ4B,SAAW7B,EAAOC,QAAQd,KAC3C,2BAAKY,GAAUuC,IAE1BC,eAAgB,SAACxC,EAAYC,GACzBZ,QAAQC,IAAI,oCAAqCW,EAAOC,QAAQ4B,SAChE,IAAIS,EAAgB,GAEpB,OADAA,EAAStC,EAAOC,QAAQ4B,cAAWW,EAC5B,2BAAKzC,GAAUuC,IAE1BG,UAAW,SAAC1C,EAAYC,GACpB,OAAOmC,M,EAKqCC,EAAW5B,QAApD6B,E,EAAAA,UAAsBE,G,EAAXE,U,EAAWF,gBACtBH,IAAf,QCkBeM,MApCf,SAAcvB,GAAa,IAAD,EACEwB,mBAAoB,CAACC,MAAO,eAD9B,mBACfC,EADe,KACTC,EADS,KAOhBvB,EAAWC,cAEXuB,EAAO,uCAAG,WAAOlE,GAAP,iBAAAC,EAAA,+EAEeC,MAAMF,EAAIG,QAAQ,QAAS,WAF1C,cAEFC,EAFE,gBAGWA,EAASC,OAHpB,OAGFC,EAHE,OAIR2D,EAAQ3D,GACRoC,EAASc,EAAU,CAACR,QAASV,EAAMU,QAAS1C,KAAMA,KAL1C,kDAORC,QAAQmB,MAAM,iBAAd,MAPQ,yBASRnB,QAAQC,IAAI,sBATJ,6EAAH,sDAoBb,OAPAoC,qBAAU,WAEN,OADAsB,EAAQ5B,EAAMtC,KACP,WACH0C,EAASgB,EAAe,CAACV,QAASV,EAAMU,cAE7C,IAGC,oBAAIH,UAAW,eAAf,SACKmB,EAAKD,SCDHI,MA1Bf,SAAgB7B,GACZ,IAAMS,EAAsBP,aAAY,SAACC,GACrC,OAAOA,EAAMM,UAOjB,OAJ0BP,aAAY,SAACC,GACnC,OAAOA,EAAMR,SAIb,sBAAKY,UAAW,iBAAhB,UACI,iDACA,yCAAYE,EAAOpC,QACnB,+CAAkBoC,EAAOf,cACzB,2CAAce,EAAOhB,UACrB,iDACA,6BACKgB,EAAOd,MAAMa,KAAI,SAAC9C,EAAagD,GAC5B,OAAO,cAAC,EAAD,CAAoBA,QAASA,EAAShD,IAAKA,GAAhCgD,YCnBvBoB,MAVf,WACI,OACI,sBAAKvB,UAAU,MAAf,UACI,2DACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,OCJGwB,cAAe,CAC5BC,QAAS,CACP/B,OAAQgC,EACRxB,OAAQyB,EACRvC,MAAOwC,GAEPC,WAAY,CAACC,OCAGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU1C,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ2C,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5271bdfe.chunk.js","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport { PeopleProps } from \"./index\";\r\n\r\nconst initialPeopleState: PeopleProps = { status: 'ready', count: 0, results: [] };\r\n\r\nexport const getPeopleList = createAsyncThunk('people/getPeopleList', async (url?: string) => {\r\n    const response = await fetch(url && url.replace(\"http:\", \"https:\") || 'https://swapi.dev/api/people/');\r\n    const data: PeopleProps = await response.json();\r\n    console.log('response : ', data);\r\n    return data;\r\n});\r\n\r\nexport const peopleSlice = createSlice({\r\n    name: 'people',\r\n    initialState: initialPeopleState,\r\n    reducers: {\r\n        list: (state: any, action) => {\r\n            console.log('people list action : ', action);\r\n            return action.payload;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [getPeopleList.pending.type]: (state, action) => {\r\n            return { ...state, status: 'Loading...' };\r\n        },\r\n        [getPeopleList.fulfilled.type]: (state, action) => {\r\n            console.log('getPeopleList.fulfilled: ', action);\r\n            return { ...state, status: 'ok', ...action.payload };\r\n        },\r\n        [getPeopleList.rejected.type]: (state, action) => {\r\n            console.error('getPeopleList.rejected: ', action);\r\n            return { ...state, status: 'Error', ...action.payload };\r\n        }\r\n    }\r\n});\r\n\r\nexport const { list } = peopleSlice.actions;\r\nexport default peopleSlice.reducer;\r\n","import {createSlice} from '@reduxjs/toolkit';\r\nimport { PersonProps } from './index'\r\n\r\nconst intialPersonState: PersonProps = {\r\n    name: '',\r\n    height: '',\r\n    mass: '',\r\n    url: '',\r\n    gender: '',\r\n    birth_year: '',\r\n    films: []\r\n};\r\n\r\nexport const personSlice = createSlice({\r\n    name: 'person',\r\n    initialState: intialPersonState,\r\n    reducers: {\r\n        update: (state: any, action) => {\r\n            return action.payload;\r\n        },\r\n        clear: (state) => {\r\n            return intialPersonState;\r\n        }\r\n    },\r\n});\r\n\r\nexport const { update, clear } = personSlice.actions;\r\nexport default personSlice.reducer;\r\n","import './styles.css';\r\nimport React, {useState, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { getPeopleList } from './people.reducer';\r\nimport { update } from '../Person/person.reducer';\r\nimport { PersonProps } from '../Person';\r\n\r\nexport interface PeopleProps {\r\n    status: string;\r\n    count: number;\r\n    next?: string;\r\n    previous?: string;\r\n    results: Array<PersonProps>;\r\n}\r\n\r\nfunction People(props: any) {\r\n    const people: PeopleProps = useSelector((store: any) => {\r\n        return store.people;\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getPeopleList());\r\n    }, []);\r\n\r\n    return (\r\n        <table className='people'>\r\n            <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Height</th>\r\n                <th>Mass</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {people.results.map((person: any, indexId: any) => {\r\n                return (\r\n                    <tr key={indexId} onClick={() => {\r\n                        dispatch(update(person));\r\n                    }}>\r\n                        <td>{person.name}</td>\r\n                        <td>{person.height}</td>\r\n                        <td>{person.mass}</td>\r\n                    </tr>\r\n                );\r\n            })\r\n            }\r\n            </tbody>\r\n            <tfoot>\r\n            <tr>\r\n                <td colSpan={3}>\r\n                    { people.status }\r\n                    { ' ' }\r\n                    Pagination: { ' ' }\r\n                    {people.previous &&\r\n                    <a href={'#'} onClick={() => {\r\n                        dispatch(getPeopleList(people.previous));\r\n                    }}>Back</a>\r\n                    }\r\n                    { ' ' }\r\n                    {people.next &&\r\n                    <a href={'#'} onClick={() => {\r\n                        // getPeople(people.next)\r\n                        dispatch(getPeopleList(people.next));\r\n                    }}>Next</a>\r\n                    }\r\n                </td>\r\n            </tr>\r\n            </tfoot>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default People;\r\n","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {FilmProps, FilmsProps} from './index'\r\n\r\nconst initialFilmState: FilmProps = {  title: '' };\r\n\r\nconst initialFilmsState: FilmsProps = {};\r\n\r\nexport const filmsSlice = createSlice({\r\n    name: 'films',\r\n    initialState: initialFilmsState,\r\n    reducers: {\r\n        addToList: (state: any, action) => {\r\n            console.log(\"Film addToList at index ::: \", action.payload.indexId);\r\n            let titleObj: any = {};\r\n            titleObj[action.payload.indexId] = action.payload.data;\r\n            return { ...state, ...titleObj };\r\n        },\r\n        removeFromList: (state: any, action) => {\r\n            console.log(\"Film removeFromList at index ::: \", action.payload.indexId);\r\n            let titleObj: any = {};\r\n            titleObj[action.payload.indexId] = undefined;\r\n            return { ...state, ...titleObj };\r\n        },\r\n        resetList: (state: any, action) => {\r\n            return initialFilmsState;\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addToList, resetList, removeFromList } = filmsSlice.actions;\r\nexport default filmsSlice.reducer;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {addToList, removeFromList, resetList} from './film.reducer';\r\n\r\nexport interface FilmProps {\r\n    title: string;\r\n}\r\n\r\nexport interface FilmsProps  {\r\n    [key: number]: FilmProps\r\n}\r\n\r\nfunction Film(props: any) {\r\n    const [film, setFilm] = useState<FilmProps>({title: 'loading...'});\r\n\r\n    // const film = useSelector((store: any) => {\r\n    //     return store.films[props.indexId] || { title: 'loading...'};\r\n    // });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const getFilm = async (url: string) => {\r\n        try {\r\n            const response = await fetch(url.replace(\"http:\", \"https:\"));\r\n            const data = await response.json();\r\n            setFilm(data);\r\n            dispatch(addToList({indexId: props.indexId, data: data}));\r\n        } catch (err: any) {\r\n            console.error('getFilm err : ', err);\r\n        } finally {\r\n            console.log('getFilm finally : ');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getFilm(props.url);\r\n        return () => {\r\n            dispatch(removeFromList({indexId: props.indexId}));\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <li className={'film-details'}>\r\n            {film.title}\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Film;\r\n","import './styles.css';\r\nimport React, {useState, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport Film, {FilmProps, FilmsProps} from \"../Film\";\r\n\r\nexport interface PersonProps {\r\n    name: string;\r\n    height: string;\r\n    mass: string;\r\n    url: string;\r\n    birth_year: string,\r\n    gender: string;\r\n    films: Array<string>;\r\n    filmArray?: Array<FilmProps>;\r\n}\r\n\r\nfunction Person(props: any) {\r\n    const person: PersonProps = useSelector((store: any) => {\r\n        return store.person;\r\n    });\r\n\r\n    const films: FilmsProps = useSelector((store: any) => {\r\n        return store.films;\r\n    });\r\n\r\n    return (\r\n        <div className={'person-details'}>\r\n            <h3>Details Section</h3>\r\n            <div>Name: {person.name}</div>\r\n            <div>Birth year: {person.birth_year}</div>\r\n            <div>Gender: {person.gender}</div>\r\n            <div>List of films:</div>\r\n            <ul>\r\n                {person.films.map((url: string, indexId: any) => {\r\n                    return <Film key={indexId} indexId={indexId} url={url}/>;\r\n                })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Person;\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport People from './components/People';\nimport Person from './components/Person';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <h2>Table with list of people</h2>\n            <People />\n            <Person />\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport filmsReducer from './components/Film/film.reducer';\r\nimport peopleReducer from './components/People/people.reducer';\r\nimport personReducer from './components/Person/person.reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    people: peopleReducer,\r\n    person: personReducer,\r\n    films: filmsReducer,\r\n  },\r\n    middleware: [thunk]\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}